import { SpeakeasyBase } from "../../../internal/utils";
export declare class Files extends SpeakeasyBase {
    content: Uint8Array;
    fileName: string;
}
export declare class PartitionParameters extends SpeakeasyBase {
    /**
     * Use one of the supported strategies to chunk the returned elements. Currently supports: by_title
     */
    chunkingStrategy?: string;
    /**
     * If chunking strategy is set, combine elements until a section reaches a length of n chars. Default: 500
     */
    combineUnderNChars?: number;
    /**
     * If true, return coordinates for each element. Default: false
     */
    coordinates?: boolean;
    /**
     * The encoding method used to decode the text input. Default: utf-8
     */
    encoding?: string;
    /**
     * The types of elements to extract, for use in extracting image blocks as base64 encoded data stored in metadata fields
     */
    extractImageBlockTypes?: string[];
    /**
     * The file to extract
     */
    files?: Files;
    /**
     * If file is gzipped, use this content type after unzipping
     */
    gzUncompressedContentType?: string;
    /**
     * The name of the inference model used when strategy is hi_res
     */
    hiResModelName?: string;
    /**
     * If True, the output will include page breaks if the filetype supports it. Default: false
     */
    includePageBreaks?: boolean;
    /**
     * The languages present in the document, for use in partitioning and/or OCR
     */
    languages?: string[];
    /**
     * If chunking strategy is set, cut off new sections after reaching a length of n chars (hard max). Default: 1500
     */
    maxCharacters?: number;
    /**
     * If chunking strategy is set, determines if sections can span multiple sections. Default: true
     */
    multipageSections?: boolean;
    /**
     * If chunking strategy is set, cut off new sections after reaching a length of n chars (soft max). Default: 1500
     */
    newAfterNChars?: number;
    /**
     * The format of the response. Supported formats are application/json and text/csv. Default: application/json.
     */
    outputFormat?: string;
    /**
     * A prefix of this many trailing characters from prior text-split chunk is applied to second and later chunks formed from oversized elements by text-splitting. Default: None
     */
    overlap?: number;
    /**
     * When True, overlap is also applied to 'normal' chunks formed by combining whole elements. Use with caution as this can introduce noise into otherwise clean semantic units. Default: None
     */
    overlapAll?: boolean;
    /**
     * If True and strategy=hi_res, any Table Elements extracted from a PDF will include an additional metadata field, 'text_as_html', where the value (string) is a just a transformation of the data into an HTML <table>.
     */
    pdfInferTableStructure?: boolean;
    /**
     * The document types that you want to skip table extraction with. Default: ['pdf', 'jpg', 'png']
     */
    skipInferTableTypes?: string[];
    /**
     * The strategy to use for partitioning PDF/image. Options are fast, hi_res, auto. Default: auto
     */
    strategy?: string;
    /**
     * If True, will retain the XML tags in the output. Otherwise it will simply extract the text from within the tags. Only applies to partition_xml.
     */
    xmlKeepTags?: boolean;
}
